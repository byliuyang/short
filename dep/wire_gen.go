// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dep

import (
	"database/sql"
	"short/app/adapter/graphql"
	"short/app/adapter/repo"
	"short/app/adapter/routing"
	"short/app/usecase/captcha"
	"short/app/usecase/keygen"
	"short/app/usecase/url"
	"short/modern/mdgraphql"
	"short/modern/mdhttp"
	"short/modern/mdlogger"
	"short/modern/mdrouting"
	"short/modern/mdservice"
	"short/modern/mdtracer"
)

// Injectors from wire.go:

func InitGraphQlService(name string, db *sql.DB, graphqlPath mdgraphql.Path, secret captcha.RecaptchaV3Secret) mdservice.Service {
	logger := mdlogger.NewLocal()
	tracer := mdtracer.NewLocal()
	repoUrl := repo.NewUrlSql(db)
	retriever := url.NewRetrieverPersist(repoUrl)
	keyGenerator := keygen.NewInMemory()
	creator := url.NewCreatorPersist(repoUrl, keyGenerator)
	client := mdhttp.NewClient()
	verifier := captcha.NewRecaptchaV3Verifier(client, secret)
	graphQlApi := graphql.NewShort(logger, tracer, retriever, creator, verifier)
	server := mdgraphql.NewGraphGophers(graphqlPath, logger, tracer, graphQlApi)
	service := mdservice.New(name, server, logger)
	return service
}

func InitRoutingService(name string, db *sql.DB, wwwRoot routing.WwwRoot) mdservice.Service {
	logger := mdlogger.NewLocal()
	tracer := mdtracer.NewLocal()
	repoUrl := repo.NewUrlSql(db)
	v := routing.NewShort(logger, tracer, wwwRoot, repoUrl)
	server := mdrouting.NewBuiltIn(logger, tracer, v)
	service := mdservice.New(name, server, logger)
	return service
}
